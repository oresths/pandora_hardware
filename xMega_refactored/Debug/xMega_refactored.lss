
xMega_refactored.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  000008b4  00000948  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002a  00802008  00802008  00000950  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00000980  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006ced  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e30  00000000  00000000  0000784d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003527  00000000  00000000  0000867d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000370  00000000  00000000  0000bba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000261ff  00000000  00000000  0000bf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000017e3  00000000  00000000  00032113  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  000338f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000952f  00000000  00000000  00033a66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	83 c0       	rjmp	.+262    	; 0x23c <__bad_interrupt>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	cd bf       	out	0x3d, r28	; 61
 1fc:	df e3       	ldi	r29, 0x3F	; 63
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e4 eb       	ldi	r30, 0xB4	; 180
 214:	f8 e0       	ldi	r31, 0x08	; 8
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	20 e2       	ldi	r18, 0x20	; 32
 22a:	a8 e0       	ldi	r26, 0x08	; 8
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a2 33       	cpi	r26, 0x32	; 50
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	bf d2       	rcall	.+1406   	; 0x7b8 <main>
 23a:	3a c3       	rjmp	.+1652   	; 0x8b0 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 23e:	08 95       	ret

00000240 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	80 93 70 00 	sts	0x0070, r24
 246:	80 93 71 00 	sts	0x0071, r24
 24a:	80 93 72 00 	sts	0x0072, r24
 24e:	80 93 73 00 	sts	0x0073, r24
 252:	80 93 74 00 	sts	0x0074, r24
 256:	80 93 75 00 	sts	0x0075, r24
 25a:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	81 e4       	ldi	r24, 0x41	; 65
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	39 d0       	rcall	.+114    	; 0x2d8 <ccp_write_io>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 266:	e0 e5       	ldi	r30, 0x50	; 80
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	81 81       	ldd	r24, Z+1	; 0x01

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
 26c:	84 fd       	sbrc	r24, 4
 26e:	1b c0       	rjmp	.+54     	; 0x2a6 <sysclk_init+0x66>

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 270:	81 81       	ldd	r24, Z+1	; 0x01
#endif
		}
		break;

	case PLL_SRC_XOSC:
		if (!osc_is_ready(OSC_ID_XOSC)) {
 272:	83 fd       	sbrc	r24, 3
 274:	0b c0       	rjmp	.+22     	; 0x28c <sysclk_init+0x4c>

#ifndef CONFIG_XOSC_32KHZ_LPM
#  if (XMEGA_E && (BOARD_XOSC_TYPE == XOSC_TYPE_EXTERNAL) && defined(CONFIG_XOSC_EXTERNAL_PC4))
	OSC.XOSCCTRL = OSC_XOSCSEL4_bm;
#  else
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
 276:	8b e4       	ldi	r24, 0x4B	; 75
 278:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 27a:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 27c:	f8 94       	cli
	OSC.XOSCCTRL = BOARD_XOSC_TYPE | (CONFIG_XOSC_STARTUP << 2) |
			CONFIG_XOSC_RANGE | OSC_X32KLPM_bm;
#endif /* CONFIG_XOSC_32KHZ_LPM */

	flags = cpu_irq_save();
	OSC.CTRL |= id;
 27e:	90 81       	ld	r25, Z
 280:	98 60       	ori	r25, 0x08	; 8
 282:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 284:	8f bf       	out	0x3f, r24	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
 286:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
 288:	83 ff       	sbrs	r24, 3
 28a:	fd cf       	rjmp	.-6      	; 0x286 <sysclk_init+0x46>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 28c:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 28e:	f8 94       	cli
static inline void pll_config_write(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	OSC.PLLCTRL = cfg->ctrl;
 290:	e0 e5       	ldi	r30, 0x50	; 80
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	94 ec       	ldi	r25, 0xC4	; 196
 296:	95 83       	std	Z+5, r25	; 0x05

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	pll_config_write(cfg, pll_id);
	OSC.CTRL |= OSC_PLLEN_bm;
 298:	90 81       	ld	r25, Z
 29a:	90 61       	ori	r25, 0x10	; 16
 29c:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 29e:	8f bf       	out	0x3f, r24	; 63

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return OSC.STATUS & OSC_PLLRDY_bm;
 2a0:	81 81       	ldd	r24, Z+1	; 0x01
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
 2a2:	84 ff       	sbrs	r24, 4
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <sysclk_init+0x60>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
 2a6:	64 e0       	ldi	r22, 0x04	; 4
 2a8:	80 e4       	ldi	r24, 0x40	; 64
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	15 d0       	rcall	.+42     	; 0x2d8 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2ae:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
 2b0:	f8 94       	cli
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
 2b2:	e0 e5       	ldi	r30, 0x50	; 80
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 81       	ld	r25, Z
 2b8:	9e 7f       	andi	r25, 0xFE	; 254
 2ba:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2bc:	8f bf       	out	0x3f, r24	; 63
 2be:	08 95       	ret

000002c0 <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
 2c0:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
 2c2:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
 2c4:	e8 2f       	mov	r30, r24
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e0 59       	subi	r30, 0x90	; 144
 2ca:	ff 4f       	sbci	r31, 0xFF	; 255
 2cc:	60 95       	com	r22
 2ce:	80 81       	ld	r24, Z
 2d0:	68 23       	and	r22, r24
 2d2:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 2d4:	9f bf       	out	0x3f, r25	; 63
 2d6:	08 95       	ret

000002d8 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
 2d8:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
 2da:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
 2dc:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
 2de:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
 2e0:	60 83       	st	Z, r22
	ret                             // Return to caller
 2e2:	08 95       	ret

000002e4 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 2e4:	4f 92       	push	r4
 2e6:	5f 92       	push	r5
 2e8:	6f 92       	push	r6
 2ea:	7f 92       	push	r7
 2ec:	8f 92       	push	r8
 2ee:	9f 92       	push	r9
 2f0:	af 92       	push	r10
 2f2:	bf 92       	push	r11
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	4a 01       	movw	r8, r20
 308:	5b 01       	movw	r10, r22
 30a:	28 01       	movw	r4, r16
 30c:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
 30e:	d9 01       	movw	r26, r18
 310:	c8 01       	movw	r24, r16
 312:	68 94       	set
 314:	12 f8       	bld	r1, 2
 316:	b6 95       	lsr	r27
 318:	a7 95       	ror	r26
 31a:	97 95       	ror	r25
 31c:	87 95       	ror	r24
 31e:	16 94       	lsr	r1
 320:	d1 f7       	brne	.-12     	; 0x316 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
 322:	b9 01       	movw	r22, r18
 324:	a8 01       	movw	r20, r16
 326:	03 2e       	mov	r0, r19
 328:	36 e1       	ldi	r19, 0x16	; 22
 32a:	76 95       	lsr	r23
 32c:	67 95       	ror	r22
 32e:	57 95       	ror	r21
 330:	47 95       	ror	r20
 332:	3a 95       	dec	r19
 334:	d1 f7       	brne	.-12     	; 0x32a <usart_set_baudrate+0x46>
 336:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 338:	2c 81       	ldd	r18, Y+4	; 0x04
 33a:	22 fd       	sbrc	r18, 2
 33c:	08 c0       	rjmp	.+16     	; 0x34e <usart_set_baudrate+0x6a>
		max_rate /= 2;
 33e:	b6 95       	lsr	r27
 340:	a7 95       	ror	r26
 342:	97 95       	ror	r25
 344:	87 95       	ror	r24
		min_rate /= 2;
 346:	76 95       	lsr	r23
 348:	67 95       	ror	r22
 34a:	57 95       	ror	r21
 34c:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 34e:	88 15       	cp	r24, r8
 350:	99 05       	cpc	r25, r9
 352:	aa 05       	cpc	r26, r10
 354:	bb 05       	cpc	r27, r11
 356:	08 f4       	brcc	.+2      	; 0x35a <usart_set_baudrate+0x76>
 358:	a2 c0       	rjmp	.+324    	; 0x49e <usart_set_baudrate+0x1ba>
 35a:	84 16       	cp	r8, r20
 35c:	95 06       	cpc	r9, r21
 35e:	a6 06       	cpc	r10, r22
 360:	b7 06       	cpc	r11, r23
 362:	08 f4       	brcc	.+2      	; 0x366 <usart_set_baudrate+0x82>
 364:	9e c0       	rjmp	.+316    	; 0x4a2 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
 366:	8c 81       	ldd	r24, Y+4	; 0x04
 368:	82 fd       	sbrc	r24, 2
 36a:	04 c0       	rjmp	.+8      	; 0x374 <usart_set_baudrate+0x90>
		baud *= 2;
 36c:	88 0c       	add	r8, r8
 36e:	99 1c       	adc	r9, r9
 370:	aa 1c       	adc	r10, r10
 372:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
 374:	c3 01       	movw	r24, r6
 376:	b2 01       	movw	r22, r4
 378:	a5 01       	movw	r20, r10
 37a:	94 01       	movw	r18, r8
 37c:	77 d2       	rcall	.+1262   	; 0x86c <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
 37e:	2f 3f       	cpi	r18, 0xFF	; 255
 380:	31 05       	cpc	r19, r1
 382:	41 05       	cpc	r20, r1
 384:	51 05       	cpc	r21, r1
 386:	08 f4       	brcc	.+2      	; 0x38a <usart_set_baudrate+0xa6>
 388:	8e c0       	rjmp	.+284    	; 0x4a6 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
 38a:	c1 2c       	mov	r12, r1
 38c:	d1 2c       	mov	r13, r1
 38e:	76 01       	movw	r14, r12
 390:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 392:	19 ef       	ldi	r17, 0xF9	; 249
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
 396:	2c 15       	cp	r18, r12
 398:	3d 05       	cpc	r19, r13
 39a:	4e 05       	cpc	r20, r14
 39c:	5f 05       	cpc	r21, r15
 39e:	68 f0       	brcs	.+26     	; 0x3ba <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
 3a0:	cc 0c       	add	r12, r12
 3a2:	dd 1c       	adc	r13, r13
 3a4:	ee 1c       	adc	r14, r14
 3a6:	ff 1c       	adc	r15, r15

		if (exp < -3) {
 3a8:	1d 3f       	cpi	r17, 0xFD	; 253
 3aa:	14 f4       	brge	.+4      	; 0x3b0 <usart_set_baudrate+0xcc>
			limit |= 1;
 3ac:	68 94       	set
 3ae:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 3b0:	1f 5f       	subi	r17, 0xFF	; 255
 3b2:	17 30       	cpi	r17, 0x07	; 7
 3b4:	81 f7       	brne	.-32     	; 0x396 <usart_set_baudrate+0xb2>
 3b6:	21 2f       	mov	r18, r17
 3b8:	4e c0       	rjmp	.+156    	; 0x456 <usart_set_baudrate+0x172>
 3ba:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
 3bc:	11 23       	and	r17, r17
 3be:	0c f0       	brlt	.+2      	; 0x3c2 <usart_set_baudrate+0xde>
 3c0:	4a c0       	rjmp	.+148    	; 0x456 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 3c2:	d5 01       	movw	r26, r10
 3c4:	c4 01       	movw	r24, r8
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	aa 1f       	adc	r26, r26
 3cc:	bb 1f       	adc	r27, r27
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	48 1a       	sub	r4, r24
 3e0:	59 0a       	sbc	r5, r25
 3e2:	6a 0a       	sbc	r6, r26
 3e4:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
 3e6:	1e 3f       	cpi	r17, 0xFE	; 254
 3e8:	ec f4       	brge	.+58     	; 0x424 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
 3ea:	6d ef       	ldi	r22, 0xFD	; 253
 3ec:	7f ef       	ldi	r23, 0xFF	; 255
 3ee:	61 1b       	sub	r22, r17
 3f0:	71 09       	sbc	r23, r1
 3f2:	17 fd       	sbrc	r17, 7
 3f4:	73 95       	inc	r23
 3f6:	04 c0       	rjmp	.+8      	; 0x400 <usart_set_baudrate+0x11c>
 3f8:	44 0c       	add	r4, r4
 3fa:	55 1c       	adc	r5, r5
 3fc:	66 1c       	adc	r6, r6
 3fe:	77 1c       	adc	r7, r7
 400:	6a 95       	dec	r22
 402:	d2 f7       	brpl	.-12     	; 0x3f8 <usart_set_baudrate+0x114>
 404:	d5 01       	movw	r26, r10
 406:	c4 01       	movw	r24, r8
 408:	b6 95       	lsr	r27
 40a:	a7 95       	ror	r26
 40c:	97 95       	ror	r25
 40e:	87 95       	ror	r24
 410:	bc 01       	movw	r22, r24
 412:	cd 01       	movw	r24, r26
 414:	64 0d       	add	r22, r4
 416:	75 1d       	adc	r23, r5
 418:	86 1d       	adc	r24, r6
 41a:	97 1d       	adc	r25, r7
 41c:	a5 01       	movw	r20, r10
 41e:	94 01       	movw	r18, r8
 420:	25 d2       	rcall	.+1098   	; 0x86c <__udivmodsi4>
 422:	34 c0       	rjmp	.+104    	; 0x48c <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
 424:	23 e0       	ldi	r18, 0x03	; 3
 426:	21 0f       	add	r18, r17
 428:	d5 01       	movw	r26, r10
 42a:	c4 01       	movw	r24, r8
 42c:	04 c0       	rjmp	.+8      	; 0x436 <usart_set_baudrate+0x152>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	aa 1f       	adc	r26, r26
 434:	bb 1f       	adc	r27, r27
 436:	2a 95       	dec	r18
 438:	d2 f7       	brpl	.-12     	; 0x42e <usart_set_baudrate+0x14a>
 43a:	9c 01       	movw	r18, r24
 43c:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
 43e:	b6 95       	lsr	r27
 440:	a7 95       	ror	r26
 442:	97 95       	ror	r25
 444:	87 95       	ror	r24
 446:	bc 01       	movw	r22, r24
 448:	cd 01       	movw	r24, r26
 44a:	64 0d       	add	r22, r4
 44c:	75 1d       	adc	r23, r5
 44e:	86 1d       	adc	r24, r6
 450:	97 1d       	adc	r25, r7
 452:	0c d2       	rcall	.+1048   	; 0x86c <__udivmodsi4>
 454:	1b c0       	rjmp	.+54     	; 0x48c <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
 456:	2d 5f       	subi	r18, 0xFD	; 253
 458:	d5 01       	movw	r26, r10
 45a:	c4 01       	movw	r24, r8
 45c:	04 c0       	rjmp	.+8      	; 0x466 <usart_set_baudrate+0x182>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	aa 1f       	adc	r26, r26
 464:	bb 1f       	adc	r27, r27
 466:	2a 95       	dec	r18
 468:	d2 f7       	brpl	.-12     	; 0x45e <usart_set_baudrate+0x17a>
 46a:	9c 01       	movw	r18, r24
 46c:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
 46e:	b6 95       	lsr	r27
 470:	a7 95       	ror	r26
 472:	97 95       	ror	r25
 474:	87 95       	ror	r24
 476:	bc 01       	movw	r22, r24
 478:	cd 01       	movw	r24, r26
 47a:	64 0d       	add	r22, r4
 47c:	75 1d       	adc	r23, r5
 47e:	86 1d       	adc	r24, r6
 480:	97 1d       	adc	r25, r7
 482:	f4 d1       	rcall	.+1000   	; 0x86c <__udivmodsi4>
 484:	21 50       	subi	r18, 0x01	; 1
 486:	31 09       	sbc	r19, r1
 488:	41 09       	sbc	r20, r1
 48a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
 48c:	83 2f       	mov	r24, r19
 48e:	8f 70       	andi	r24, 0x0F	; 15
 490:	12 95       	swap	r17
 492:	10 7f       	andi	r17, 0xF0	; 240
 494:	18 2b       	or	r17, r24
 496:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
 498:	2e 83       	std	Y+6, r18	; 0x06

	return true;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	18 c0       	rjmp	.+48     	; 0x4ce <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	16 c0       	rjmp	.+44     	; 0x4ce <usart_set_baudrate+0x1ea>
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	14 c0       	rjmp	.+40     	; 0x4ce <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
 4a6:	d5 01       	movw	r26, r10
 4a8:	c4 01       	movw	r24, r8
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	aa 1f       	adc	r26, r26
 4b0:	bb 1f       	adc	r27, r27
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	aa 1f       	adc	r26, r26
 4b8:	bb 1f       	adc	r27, r27
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	48 1a       	sub	r4, r24
 4c4:	59 0a       	sbc	r5, r25
 4c6:	6a 0a       	sbc	r6, r26
 4c8:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
 4ca:	19 ef       	ldi	r17, 0xF9	; 249
 4cc:	8e cf       	rjmp	.-228    	; 0x3ea <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	1f 91       	pop	r17
 4d4:	0f 91       	pop	r16
 4d6:	ff 90       	pop	r15
 4d8:	ef 90       	pop	r14
 4da:	df 90       	pop	r13
 4dc:	cf 90       	pop	r12
 4de:	bf 90       	pop	r11
 4e0:	af 90       	pop	r10
 4e2:	9f 90       	pop	r9
 4e4:	8f 90       	pop	r8
 4e6:	7f 90       	pop	r7
 4e8:	6f 90       	pop	r6
 4ea:	5f 90       	pop	r5
 4ec:	4f 90       	pop	r4
 4ee:	08 95       	ret

000004f0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	ec 01       	movw	r28, r24
 4fa:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
 4fc:	00 97       	sbiw	r24, 0x00	; 0
 4fe:	09 f4       	brne	.+2      	; 0x502 <usart_init_rs232+0x12>
 500:	36 c1       	rjmp	.+620    	; 0x76e <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
 502:	80 3c       	cpi	r24, 0xC0	; 192
 504:	91 05       	cpc	r25, r1
 506:	21 f4       	brne	.+8      	; 0x510 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
 508:	60 e1       	ldi	r22, 0x10	; 16
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	d9 de       	rcall	.-590    	; 0x2c0 <sysclk_enable_module>
 50e:	2f c1       	rjmp	.+606    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
 510:	c0 34       	cpi	r28, 0x40	; 64
 512:	84 e0       	ldi	r24, 0x04	; 4
 514:	d8 07       	cpc	r29, r24
 516:	21 f4       	brne	.+8      	; 0x520 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
 518:	68 e0       	ldi	r22, 0x08	; 8
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	d1 de       	rcall	.-606    	; 0x2c0 <sysclk_enable_module>
 51e:	27 c1       	rjmp	.+590    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
 520:	c1 15       	cp	r28, r1
 522:	e4 e0       	ldi	r30, 0x04	; 4
 524:	de 07       	cpc	r29, r30
 526:	21 f4       	brne	.+8      	; 0x530 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	c9 de       	rcall	.-622    	; 0x2c0 <sysclk_enable_module>
 52e:	1f c1       	rjmp	.+574    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
 530:	c0 38       	cpi	r28, 0x80	; 128
 532:	f1 e0       	ldi	r31, 0x01	; 1
 534:	df 07       	cpc	r29, r31
 536:	21 f4       	brne	.+8      	; 0x540 <usart_init_rs232+0x50>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
 538:	62 e0       	ldi	r22, 0x02	; 2
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	c1 de       	rcall	.-638    	; 0x2c0 <sysclk_enable_module>
 53e:	17 c1       	rjmp	.+558    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
 540:	c1 15       	cp	r28, r1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	d8 07       	cpc	r29, r24
 546:	21 f4       	brne	.+8      	; 0x550 <usart_init_rs232+0x60>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	b9 de       	rcall	.-654    	; 0x2c0 <sysclk_enable_module>
 54e:	0f c1       	rjmp	.+542    	; 0x76e <usart_init_rs232+0x27e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
 550:	c0 38       	cpi	r28, 0x80	; 128
 552:	e3 e0       	ldi	r30, 0x03	; 3
 554:	de 07       	cpc	r29, r30
 556:	21 f4       	brne	.+8      	; 0x560 <usart_init_rs232+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	b1 de       	rcall	.-670    	; 0x2c0 <sysclk_enable_module>
 55e:	07 c1       	rjmp	.+526    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
 560:	c0 39       	cpi	r28, 0x90	; 144
 562:	f3 e0       	ldi	r31, 0x03	; 3
 564:	df 07       	cpc	r29, r31
 566:	21 f4       	brne	.+8      	; 0x570 <usart_init_rs232+0x80>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	a9 de       	rcall	.-686    	; 0x2c0 <sysclk_enable_module>
 56e:	ff c0       	rjmp	.+510    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
 570:	c1 15       	cp	r28, r1
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	d8 07       	cpc	r29, r24
 576:	21 f4       	brne	.+8      	; 0x580 <usart_init_rs232+0x90>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
 578:	62 e0       	ldi	r22, 0x02	; 2
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	a1 de       	rcall	.-702    	; 0x2c0 <sysclk_enable_module>
 57e:	f7 c0       	rjmp	.+494    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
 580:	c0 34       	cpi	r28, 0x40	; 64
 582:	e2 e0       	ldi	r30, 0x02	; 2
 584:	de 07       	cpc	r29, r30
 586:	21 f4       	brne	.+8      	; 0x590 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
 588:	62 e0       	ldi	r22, 0x02	; 2
 58a:	82 e0       	ldi	r24, 0x02	; 2
 58c:	99 de       	rcall	.-718    	; 0x2c0 <sysclk_enable_module>
 58e:	ef c0       	rjmp	.+478    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
 590:	c1 15       	cp	r28, r1
 592:	f3 e0       	ldi	r31, 0x03	; 3
 594:	df 07       	cpc	r29, r31
 596:	21 f4       	brne	.+8      	; 0x5a0 <usart_init_rs232+0xb0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	91 de       	rcall	.-734    	; 0x2c0 <sysclk_enable_module>
 59e:	e7 c0       	rjmp	.+462    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
 5a0:	c0 32       	cpi	r28, 0x20	; 32
 5a2:	83 e0       	ldi	r24, 0x03	; 3
 5a4:	d8 07       	cpc	r29, r24
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <usart_init_rs232+0xc0>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
 5a8:	64 e0       	ldi	r22, 0x04	; 4
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	89 de       	rcall	.-750    	; 0x2c0 <sysclk_enable_module>
 5ae:	df c0       	rjmp	.+446    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
 5b0:	c1 15       	cp	r28, r1
 5b2:	e8 e0       	ldi	r30, 0x08	; 8
 5b4:	de 07       	cpc	r29, r30
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <usart_init_rs232+0xd0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	81 de       	rcall	.-766    	; 0x2c0 <sysclk_enable_module>
 5be:	d7 c0       	rjmp	.+430    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
 5c0:	c1 15       	cp	r28, r1
 5c2:	f9 e0       	ldi	r31, 0x09	; 9
 5c4:	df 07       	cpc	r29, r31
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <usart_init_rs232+0xe0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	84 e0       	ldi	r24, 0x04	; 4
 5cc:	79 de       	rcall	.-782    	; 0x2c0 <sysclk_enable_module>
 5ce:	cf c0       	rjmp	.+414    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
 5d0:	c1 15       	cp	r28, r1
 5d2:	8a e0       	ldi	r24, 0x0A	; 10
 5d4:	d8 07       	cpc	r29, r24
 5d6:	21 f4       	brne	.+8      	; 0x5e0 <usart_init_rs232+0xf0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	71 de       	rcall	.-798    	; 0x2c0 <sysclk_enable_module>
 5de:	c7 c0       	rjmp	.+398    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
 5e0:	c1 15       	cp	r28, r1
 5e2:	eb e0       	ldi	r30, 0x0B	; 11
 5e4:	de 07       	cpc	r29, r30
 5e6:	21 f4       	brne	.+8      	; 0x5f0 <usart_init_rs232+0x100>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	69 de       	rcall	.-814    	; 0x2c0 <sysclk_enable_module>
 5ee:	bf c0       	rjmp	.+382    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
 5f0:	c0 34       	cpi	r28, 0x40	; 64
 5f2:	f8 e0       	ldi	r31, 0x08	; 8
 5f4:	df 07       	cpc	r29, r31
 5f6:	21 f4       	brne	.+8      	; 0x600 <usart_init_rs232+0x110>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
 5f8:	62 e0       	ldi	r22, 0x02	; 2
 5fa:	83 e0       	ldi	r24, 0x03	; 3
 5fc:	61 de       	rcall	.-830    	; 0x2c0 <sysclk_enable_module>
 5fe:	b7 c0       	rjmp	.+366    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
 600:	c0 34       	cpi	r28, 0x40	; 64
 602:	89 e0       	ldi	r24, 0x09	; 9
 604:	d8 07       	cpc	r29, r24
 606:	21 f4       	brne	.+8      	; 0x610 <usart_init_rs232+0x120>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
 608:	62 e0       	ldi	r22, 0x02	; 2
 60a:	84 e0       	ldi	r24, 0x04	; 4
 60c:	59 de       	rcall	.-846    	; 0x2c0 <sysclk_enable_module>
 60e:	af c0       	rjmp	.+350    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
 610:	c0 34       	cpi	r28, 0x40	; 64
 612:	ea e0       	ldi	r30, 0x0A	; 10
 614:	de 07       	cpc	r29, r30
 616:	21 f4       	brne	.+8      	; 0x620 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
 618:	62 e0       	ldi	r22, 0x02	; 2
 61a:	85 e0       	ldi	r24, 0x05	; 5
 61c:	51 de       	rcall	.-862    	; 0x2c0 <sysclk_enable_module>
 61e:	a7 c0       	rjmp	.+334    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
 620:	c0 34       	cpi	r28, 0x40	; 64
 622:	fb e0       	ldi	r31, 0x0B	; 11
 624:	df 07       	cpc	r29, r31
 626:	21 f4       	brne	.+8      	; 0x630 <usart_init_rs232+0x140>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
 628:	62 e0       	ldi	r22, 0x02	; 2
 62a:	86 e0       	ldi	r24, 0x06	; 6
 62c:	49 de       	rcall	.-878    	; 0x2c0 <sysclk_enable_module>
 62e:	9f c0       	rjmp	.+318    	; 0x76e <usart_init_rs232+0x27e>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
 630:	c0 39       	cpi	r28, 0x90	; 144
 632:	88 e0       	ldi	r24, 0x08	; 8
 634:	d8 07       	cpc	r29, r24
 636:	21 f4       	brne	.+8      	; 0x640 <usart_init_rs232+0x150>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
 638:	64 e0       	ldi	r22, 0x04	; 4
 63a:	83 e0       	ldi	r24, 0x03	; 3
 63c:	41 de       	rcall	.-894    	; 0x2c0 <sysclk_enable_module>
 63e:	97 c0       	rjmp	.+302    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
 640:	c0 39       	cpi	r28, 0x90	; 144
 642:	e9 e0       	ldi	r30, 0x09	; 9
 644:	de 07       	cpc	r29, r30
 646:	21 f4       	brne	.+8      	; 0x650 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
 648:	64 e0       	ldi	r22, 0x04	; 4
 64a:	84 e0       	ldi	r24, 0x04	; 4
 64c:	39 de       	rcall	.-910    	; 0x2c0 <sysclk_enable_module>
 64e:	8f c0       	rjmp	.+286    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
 650:	c0 39       	cpi	r28, 0x90	; 144
 652:	fa e0       	ldi	r31, 0x0A	; 10
 654:	df 07       	cpc	r29, r31
 656:	21 f4       	brne	.+8      	; 0x660 <usart_init_rs232+0x170>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
 658:	64 e0       	ldi	r22, 0x04	; 4
 65a:	85 e0       	ldi	r24, 0x05	; 5
 65c:	31 de       	rcall	.-926    	; 0x2c0 <sysclk_enable_module>
 65e:	87 c0       	rjmp	.+270    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
 660:	c0 39       	cpi	r28, 0x90	; 144
 662:	8b e0       	ldi	r24, 0x0B	; 11
 664:	d8 07       	cpc	r29, r24
 666:	21 f4       	brne	.+8      	; 0x670 <usart_init_rs232+0x180>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
 668:	64 e0       	ldi	r22, 0x04	; 4
 66a:	86 e0       	ldi	r24, 0x06	; 6
 66c:	29 de       	rcall	.-942    	; 0x2c0 <sysclk_enable_module>
 66e:	7f c0       	rjmp	.+254    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
 670:	c0 3c       	cpi	r28, 0xC0	; 192
 672:	e8 e0       	ldi	r30, 0x08	; 8
 674:	de 07       	cpc	r29, r30
 676:	21 f4       	brne	.+8      	; 0x680 <usart_init_rs232+0x190>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
 678:	68 e0       	ldi	r22, 0x08	; 8
 67a:	83 e0       	ldi	r24, 0x03	; 3
 67c:	21 de       	rcall	.-958    	; 0x2c0 <sysclk_enable_module>
 67e:	77 c0       	rjmp	.+238    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
 680:	c0 3c       	cpi	r28, 0xC0	; 192
 682:	f9 e0       	ldi	r31, 0x09	; 9
 684:	df 07       	cpc	r29, r31
 686:	21 f4       	brne	.+8      	; 0x690 <usart_init_rs232+0x1a0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
 688:	68 e0       	ldi	r22, 0x08	; 8
 68a:	84 e0       	ldi	r24, 0x04	; 4
 68c:	19 de       	rcall	.-974    	; 0x2c0 <sysclk_enable_module>
 68e:	6f c0       	rjmp	.+222    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
 690:	c0 3c       	cpi	r28, 0xC0	; 192
 692:	8a e0       	ldi	r24, 0x0A	; 10
 694:	d8 07       	cpc	r29, r24
 696:	21 f4       	brne	.+8      	; 0x6a0 <usart_init_rs232+0x1b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
 698:	68 e0       	ldi	r22, 0x08	; 8
 69a:	85 e0       	ldi	r24, 0x05	; 5
 69c:	11 de       	rcall	.-990    	; 0x2c0 <sysclk_enable_module>
 69e:	67 c0       	rjmp	.+206    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
 6a0:	c0 3c       	cpi	r28, 0xC0	; 192
 6a2:	eb e0       	ldi	r30, 0x0B	; 11
 6a4:	de 07       	cpc	r29, r30
 6a6:	21 f4       	brne	.+8      	; 0x6b0 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
 6a8:	68 e0       	ldi	r22, 0x08	; 8
 6aa:	86 e0       	ldi	r24, 0x06	; 6
 6ac:	09 de       	rcall	.-1006   	; 0x2c0 <sysclk_enable_module>
 6ae:	5f c0       	rjmp	.+190    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
 6b0:	c0 3a       	cpi	r28, 0xA0	; 160
 6b2:	f8 e0       	ldi	r31, 0x08	; 8
 6b4:	df 07       	cpc	r29, r31
 6b6:	21 f4       	brne	.+8      	; 0x6c0 <usart_init_rs232+0x1d0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
 6b8:	60 e1       	ldi	r22, 0x10	; 16
 6ba:	83 e0       	ldi	r24, 0x03	; 3
 6bc:	01 de       	rcall	.-1022   	; 0x2c0 <sysclk_enable_module>
 6be:	57 c0       	rjmp	.+174    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
 6c0:	c0 3a       	cpi	r28, 0xA0	; 160
 6c2:	89 e0       	ldi	r24, 0x09	; 9
 6c4:	d8 07       	cpc	r29, r24
 6c6:	21 f4       	brne	.+8      	; 0x6d0 <usart_init_rs232+0x1e0>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
 6c8:	60 e1       	ldi	r22, 0x10	; 16
 6ca:	84 e0       	ldi	r24, 0x04	; 4
 6cc:	f9 dd       	rcall	.-1038   	; 0x2c0 <sysclk_enable_module>
 6ce:	4f c0       	rjmp	.+158    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
 6d0:	c0 3a       	cpi	r28, 0xA0	; 160
 6d2:	ea e0       	ldi	r30, 0x0A	; 10
 6d4:	de 07       	cpc	r29, r30
 6d6:	21 f4       	brne	.+8      	; 0x6e0 <usart_init_rs232+0x1f0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
 6d8:	60 e1       	ldi	r22, 0x10	; 16
 6da:	85 e0       	ldi	r24, 0x05	; 5
 6dc:	f1 dd       	rcall	.-1054   	; 0x2c0 <sysclk_enable_module>
 6de:	47 c0       	rjmp	.+142    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
 6e0:	c0 3a       	cpi	r28, 0xA0	; 160
 6e2:	fb e0       	ldi	r31, 0x0B	; 11
 6e4:	df 07       	cpc	r29, r31
 6e6:	21 f4       	brne	.+8      	; 0x6f0 <usart_init_rs232+0x200>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
 6e8:	60 e1       	ldi	r22, 0x10	; 16
 6ea:	86 e0       	ldi	r24, 0x06	; 6
 6ec:	e9 dd       	rcall	.-1070   	; 0x2c0 <sysclk_enable_module>
 6ee:	3f c0       	rjmp	.+126    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
 6f0:	c0 3b       	cpi	r28, 0xB0	; 176
 6f2:	88 e0       	ldi	r24, 0x08	; 8
 6f4:	d8 07       	cpc	r29, r24
 6f6:	21 f4       	brne	.+8      	; 0x700 <usart_init_rs232+0x210>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
 6f8:	60 e2       	ldi	r22, 0x20	; 32
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	e1 dd       	rcall	.-1086   	; 0x2c0 <sysclk_enable_module>
 6fe:	37 c0       	rjmp	.+110    	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
 700:	c0 3b       	cpi	r28, 0xB0	; 176
 702:	e9 e0       	ldi	r30, 0x09	; 9
 704:	de 07       	cpc	r29, r30
 706:	21 f4       	brne	.+8      	; 0x710 <usart_init_rs232+0x220>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
 708:	60 e2       	ldi	r22, 0x20	; 32
 70a:	84 e0       	ldi	r24, 0x04	; 4
 70c:	d9 dd       	rcall	.-1102   	; 0x2c0 <sysclk_enable_module>
 70e:	2f c0       	rjmp	.+94     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
 710:	c0 3b       	cpi	r28, 0xB0	; 176
 712:	fa e0       	ldi	r31, 0x0A	; 10
 714:	df 07       	cpc	r29, r31
 716:	21 f4       	brne	.+8      	; 0x720 <usart_init_rs232+0x230>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
 718:	60 e2       	ldi	r22, 0x20	; 32
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	d1 dd       	rcall	.-1118   	; 0x2c0 <sysclk_enable_module>
 71e:	27 c0       	rjmp	.+78     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
 720:	c0 3b       	cpi	r28, 0xB0	; 176
 722:	8b e0       	ldi	r24, 0x0B	; 11
 724:	d8 07       	cpc	r29, r24
 726:	21 f4       	brne	.+8      	; 0x730 <usart_init_rs232+0x240>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
 728:	60 e2       	ldi	r22, 0x20	; 32
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	c9 dd       	rcall	.-1134   	; 0x2c0 <sysclk_enable_module>
 72e:	1f c0       	rjmp	.+62     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
 730:	c0 38       	cpi	r28, 0x80	; 128
 732:	e4 e0       	ldi	r30, 0x04	; 4
 734:	de 07       	cpc	r29, r30
 736:	21 f4       	brne	.+8      	; 0x740 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
 738:	60 e4       	ldi	r22, 0x40	; 64
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	c1 dd       	rcall	.-1150   	; 0x2c0 <sysclk_enable_module>
 73e:	17 c0       	rjmp	.+46     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
 740:	c0 39       	cpi	r28, 0x90	; 144
 742:	f4 e0       	ldi	r31, 0x04	; 4
 744:	df 07       	cpc	r29, r31
 746:	21 f4       	brne	.+8      	; 0x750 <usart_init_rs232+0x260>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
 748:	60 e4       	ldi	r22, 0x40	; 64
 74a:	84 e0       	ldi	r24, 0x04	; 4
 74c:	b9 dd       	rcall	.-1166   	; 0x2c0 <sysclk_enable_module>
 74e:	0f c0       	rjmp	.+30     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
 750:	c0 3a       	cpi	r28, 0xA0	; 160
 752:	84 e0       	ldi	r24, 0x04	; 4
 754:	d8 07       	cpc	r29, r24
 756:	21 f4       	brne	.+8      	; 0x760 <usart_init_rs232+0x270>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
 758:	60 e4       	ldi	r22, 0x40	; 64
 75a:	85 e0       	ldi	r24, 0x05	; 5
 75c:	b1 dd       	rcall	.-1182   	; 0x2c0 <sysclk_enable_module>
 75e:	07 c0       	rjmp	.+14     	; 0x76e <usart_init_rs232+0x27e>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
 760:	c0 3b       	cpi	r28, 0xB0	; 176
 762:	e4 e0       	ldi	r30, 0x04	; 4
 764:	de 07       	cpc	r29, r30
 766:	19 f4       	brne	.+6      	; 0x76e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
 768:	60 e4       	ldi	r22, 0x40	; 64
 76a:	86 e0       	ldi	r24, 0x06	; 6
 76c:	a9 dd       	rcall	.-1198   	; 0x2c0 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
 76e:	8d 81       	ldd	r24, Y+5	; 0x05
 770:	8f 73       	andi	r24, 0x3F	; 63
 772:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
 774:	f8 01       	movw	r30, r16
 776:	94 81       	ldd	r25, Z+4	; 0x04
 778:	85 81       	ldd	r24, Z+5	; 0x05
 77a:	89 2b       	or	r24, r25
 77c:	96 81       	ldd	r25, Z+6	; 0x06
 77e:	99 23       	and	r25, r25
 780:	11 f0       	breq	.+4      	; 0x786 <usart_init_rs232+0x296>
 782:	98 e0       	ldi	r25, 0x08	; 8
 784:	01 c0       	rjmp	.+2      	; 0x788 <usart_init_rs232+0x298>
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	89 2b       	or	r24, r25
 78a:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
 78c:	f8 01       	movw	r30, r16
 78e:	40 81       	ld	r20, Z
 790:	51 81       	ldd	r21, Z+1	; 0x01
 792:	62 81       	ldd	r22, Z+2	; 0x02
 794:	73 81       	ldd	r23, Z+3	; 0x03
 796:	00 e0       	ldi	r16, 0x00	; 0
 798:	14 e2       	ldi	r17, 0x24	; 36
 79a:	24 ef       	ldi	r18, 0xF4	; 244
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	ce 01       	movw	r24, r28
 7a0:	a1 dd       	rcall	.-1214   	; 0x2e4 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
 7a2:	9c 81       	ldd	r25, Y+4	; 0x04
 7a4:	98 60       	ori	r25, 0x08	; 8
 7a6:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
 7a8:	9c 81       	ldd	r25, Y+4	; 0x04
 7aa:	90 61       	ori	r25, 0x10	; 16
 7ac:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <main>:
USART_data_t PC_USART_data;


int main(void)
{
	board_init();
 7b8:	42 dd       	rcall	.-1404   	; 0x23e <board_init>
	sysclk_init();
 7ba:	42 dd       	rcall	.-1404   	; 0x240 <sysclk_init>
	init_Rs232(&PC_USART_data);
 7bc:	89 e0       	ldi	r24, 0x09	; 9
 7be:	90 e2       	ldi	r25, 0x20	; 32
 7c0:	04 d0       	rcall	.+8      	; 0x7ca <init_Rs232>
	
	//echo_mode();
	echo_mode_string();
 7c2:	26 d0       	rcall	.+76     	; 0x810 <echo_mode_string>
}
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	08 95       	ret

000007ca <init_Rs232>:
	
	while(1){
		while (!(USARTD0.STATUS & USART_RXCIF_bm));
		received_byte = USARTD0.DATA;
		usart_putc(received_byte);	
	}
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	fc 01       	movw	r30, r24
 7d0:	c0 ea       	ldi	r28, 0xA0	; 160
 7d2:	d9 e0       	ldi	r29, 0x09	; 9
 7d4:	c0 83       	st	Z, r28
 7d6:	d1 83       	std	Z+1, r29	; 0x01
 7d8:	14 a2       	std	Z+36, r1	; 0x24
 7da:	13 a2       	std	Z+35, r1	; 0x23
 7dc:	16 a2       	std	Z+38, r1	; 0x26
 7de:	15 a2       	std	Z+37, r1	; 0x25
 7e0:	60 e1       	ldi	r22, 0x10	; 16
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	6d dd       	rcall	.-1318   	; 0x2c0 <sysclk_enable_module>
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	70 e2       	ldi	r23, 0x20	; 32
 7ea:	80 ea       	ldi	r24, 0xA0	; 160
 7ec:	99 e0       	ldi	r25, 0x09	; 9
 7ee:	80 de       	rcall	.-768    	; 0x4f0 <usart_init_rs232>
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	8b 83       	std	Y+3, r24	; 0x03
 7f4:	8b 81       	ldd	r24, Y+3	; 0x03
 7f6:	80 61       	ori	r24, 0x10	; 16
 7f8:	8b 83       	std	Y+3, r24	; 0x03
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <usart_putc>:
 800:	e0 ea       	ldi	r30, 0xA0	; 160
 802:	f9 e0       	ldi	r31, 0x09	; 9
 804:	91 81       	ldd	r25, Z+1	; 0x01
 806:	95 ff       	sbrs	r25, 5
 808:	fd cf       	rjmp	.-6      	; 0x804 <usart_putc+0x4>
 80a:	80 93 a0 09 	sts	0x09A0, r24
 80e:	08 95       	ret

00000810 <echo_mode_string>:
}

void echo_mode_string(){
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	25 97       	sbiw	r28, 0x05	; 5
 81a:	cd bf       	out	0x3d, r28	; 61
 81c:	de bf       	out	0x3e, r29	; 62
	uint8_t received_byte[5];
	uint8_t count = 0;
	uint8_t i;
	
	while(1){
		while (!(USARTD0.STATUS & USART_RXCIF_bm));
 81e:	00 ea       	ldi	r16, 0xA0	; 160
 820:	19 e0       	ldi	r17, 0x09	; 9
		while ((USARTD0.STATUS & USART_RXCIF_bm)){
			received_byte[count] = USARTD0.DATA;
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	6c 01       	movw	r12, r24
 828:	98 2e       	mov	r9, r24
 82a:	ad 2c       	mov	r10, r13
	uint8_t received_byte[5];
	uint8_t count = 0;
	uint8_t i;
	
	while(1){
		while (!(USARTD0.STATUS & USART_RXCIF_bm));
 82c:	f8 01       	movw	r30, r16
 82e:	81 81       	ldd	r24, Z+1	; 0x01
 830:	88 23       	and	r24, r24
 832:	e4 f7       	brge	.-8      	; 0x82c <echo_mode_string+0x1c>
		while ((USARTD0.STATUS & USART_RXCIF_bm)){
 834:	81 81       	ldd	r24, Z+1	; 0x01
 836:	88 23       	and	r24, r24
 838:	cc f7       	brge	.-14     	; 0x82c <echo_mode_string+0x1c>
 83a:	b1 2c       	mov	r11, r1
			received_byte[count] = USARTD0.DATA;
 83c:	f8 01       	movw	r30, r16
 83e:	80 81       	ld	r24, Z
 840:	f6 01       	movw	r30, r12
 842:	eb 0d       	add	r30, r11
 844:	f1 1d       	adc	r31, r1
 846:	80 83       	st	Z, r24
			count++;
 848:	b3 94       	inc	r11
	uint8_t count = 0;
	uint8_t i;
	
	while(1){
		while (!(USARTD0.STATUS & USART_RXCIF_bm));
		while ((USARTD0.STATUS & USART_RXCIF_bm)){
 84a:	f8 01       	movw	r30, r16
 84c:	81 81       	ldd	r24, Z+1	; 0x01
 84e:	88 23       	and	r24, r24
 850:	ac f3       	brlt	.-22     	; 0x83c <echo_mode_string+0x2c>
			received_byte[count] = USARTD0.DATA;
			count++;
		}
		for (i=0;i<count;i++){
 852:	bb 20       	and	r11, r11
 854:	59 f3       	breq	.-42     	; 0x82c <echo_mode_string+0x1c>
 856:	e9 2c       	mov	r14, r9
 858:	fa 2c       	mov	r15, r10
			usart_putc(received_byte[i]);
 85a:	f7 01       	movw	r30, r14
 85c:	81 91       	ld	r24, Z+
 85e:	7f 01       	movw	r14, r30
 860:	cf df       	rcall	.-98     	; 0x800 <usart_putc>
 862:	8e 2d       	mov	r24, r14
 864:	8c 19       	sub	r24, r12
		while (!(USARTD0.STATUS & USART_RXCIF_bm));
		while ((USARTD0.STATUS & USART_RXCIF_bm)){
			received_byte[count] = USARTD0.DATA;
			count++;
		}
		for (i=0;i<count;i++){
 866:	8b 15       	cp	r24, r11
 868:	c0 f3       	brcs	.-16     	; 0x85a <echo_mode_string+0x4a>
 86a:	e0 cf       	rjmp	.-64     	; 0x82c <echo_mode_string+0x1c>

0000086c <__udivmodsi4>:
 86c:	a1 e2       	ldi	r26, 0x21	; 33
 86e:	1a 2e       	mov	r1, r26
 870:	aa 1b       	sub	r26, r26
 872:	bb 1b       	sub	r27, r27
 874:	fd 01       	movw	r30, r26
 876:	0d c0       	rjmp	.+26     	; 0x892 <__udivmodsi4_ep>

00000878 <__udivmodsi4_loop>:
 878:	aa 1f       	adc	r26, r26
 87a:	bb 1f       	adc	r27, r27
 87c:	ee 1f       	adc	r30, r30
 87e:	ff 1f       	adc	r31, r31
 880:	a2 17       	cp	r26, r18
 882:	b3 07       	cpc	r27, r19
 884:	e4 07       	cpc	r30, r20
 886:	f5 07       	cpc	r31, r21
 888:	20 f0       	brcs	.+8      	; 0x892 <__udivmodsi4_ep>
 88a:	a2 1b       	sub	r26, r18
 88c:	b3 0b       	sbc	r27, r19
 88e:	e4 0b       	sbc	r30, r20
 890:	f5 0b       	sbc	r31, r21

00000892 <__udivmodsi4_ep>:
 892:	66 1f       	adc	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	1a 94       	dec	r1
 89c:	69 f7       	brne	.-38     	; 0x878 <__udivmodsi4_loop>
 89e:	60 95       	com	r22
 8a0:	70 95       	com	r23
 8a2:	80 95       	com	r24
 8a4:	90 95       	com	r25
 8a6:	9b 01       	movw	r18, r22
 8a8:	ac 01       	movw	r20, r24
 8aa:	bd 01       	movw	r22, r26
 8ac:	cf 01       	movw	r24, r30
 8ae:	08 95       	ret

000008b0 <_exit>:
 8b0:	f8 94       	cli

000008b2 <__stop_program>:
 8b2:	ff cf       	rjmp	.-2      	; 0x8b2 <__stop_program>
